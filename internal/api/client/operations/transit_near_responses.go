// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/pskoob/miniappBack/internal/api/definition"
)

// TransitNearReader is a Reader for the TransitNear structure.
type TransitNearReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TransitNearReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTransitNearOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTransitNearBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTransitNearForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewTransitNearUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTransitNearInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /near_transaction] TransitNear", response, response.Code())
	}
}

// NewTransitNearOK creates a TransitNearOK with default headers values
func NewTransitNearOK() *TransitNearOK {
	return &TransitNearOK{}
}

/*
TransitNearOK describes a response with status code 200, with default header values.

Successful Transit Near Response
*/
type TransitNearOK struct {
	Payload *models.NearTransit
}

// IsSuccess returns true when this transit near o k response has a 2xx status code
func (o *TransitNearOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this transit near o k response has a 3xx status code
func (o *TransitNearOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this transit near o k response has a 4xx status code
func (o *TransitNearOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this transit near o k response has a 5xx status code
func (o *TransitNearOK) IsServerError() bool {
	return false
}

// IsCode returns true when this transit near o k response a status code equal to that given
func (o *TransitNearOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the transit near o k response
func (o *TransitNearOK) Code() int {
	return 200
}

func (o *TransitNearOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /near_transaction][%d] transitNearOK %s", 200, payload)
}

func (o *TransitNearOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /near_transaction][%d] transitNearOK %s", 200, payload)
}

func (o *TransitNearOK) GetPayload() *models.NearTransit {
	return o.Payload
}

func (o *TransitNearOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NearTransit)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransitNearBadRequest creates a TransitNearBadRequest with default headers values
func NewTransitNearBadRequest() *TransitNearBadRequest {
	return &TransitNearBadRequest{}
}

/*
TransitNearBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type TransitNearBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this transit near bad request response has a 2xx status code
func (o *TransitNearBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this transit near bad request response has a 3xx status code
func (o *TransitNearBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this transit near bad request response has a 4xx status code
func (o *TransitNearBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this transit near bad request response has a 5xx status code
func (o *TransitNearBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this transit near bad request response a status code equal to that given
func (o *TransitNearBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the transit near bad request response
func (o *TransitNearBadRequest) Code() int {
	return 400
}

func (o *TransitNearBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /near_transaction][%d] transitNearBadRequest %s", 400, payload)
}

func (o *TransitNearBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /near_transaction][%d] transitNearBadRequest %s", 400, payload)
}

func (o *TransitNearBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *TransitNearBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransitNearForbidden creates a TransitNearForbidden with default headers values
func NewTransitNearForbidden() *TransitNearForbidden {
	return &TransitNearForbidden{}
}

/*
TransitNearForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type TransitNearForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this transit near forbidden response has a 2xx status code
func (o *TransitNearForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this transit near forbidden response has a 3xx status code
func (o *TransitNearForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this transit near forbidden response has a 4xx status code
func (o *TransitNearForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this transit near forbidden response has a 5xx status code
func (o *TransitNearForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this transit near forbidden response a status code equal to that given
func (o *TransitNearForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the transit near forbidden response
func (o *TransitNearForbidden) Code() int {
	return 403
}

func (o *TransitNearForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /near_transaction][%d] transitNearForbidden %s", 403, payload)
}

func (o *TransitNearForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /near_transaction][%d] transitNearForbidden %s", 403, payload)
}

func (o *TransitNearForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *TransitNearForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransitNearUnprocessableEntity creates a TransitNearUnprocessableEntity with default headers values
func NewTransitNearUnprocessableEntity() *TransitNearUnprocessableEntity {
	return &TransitNearUnprocessableEntity{}
}

/*
TransitNearUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type TransitNearUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this transit near unprocessable entity response has a 2xx status code
func (o *TransitNearUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this transit near unprocessable entity response has a 3xx status code
func (o *TransitNearUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this transit near unprocessable entity response has a 4xx status code
func (o *TransitNearUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this transit near unprocessable entity response has a 5xx status code
func (o *TransitNearUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this transit near unprocessable entity response a status code equal to that given
func (o *TransitNearUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the transit near unprocessable entity response
func (o *TransitNearUnprocessableEntity) Code() int {
	return 422
}

func (o *TransitNearUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /near_transaction][%d] transitNearUnprocessableEntity %s", 422, payload)
}

func (o *TransitNearUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /near_transaction][%d] transitNearUnprocessableEntity %s", 422, payload)
}

func (o *TransitNearUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *TransitNearUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransitNearInternalServerError creates a TransitNearInternalServerError with default headers values
func NewTransitNearInternalServerError() *TransitNearInternalServerError {
	return &TransitNearInternalServerError{}
}

/*
TransitNearInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type TransitNearInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this transit near internal server error response has a 2xx status code
func (o *TransitNearInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this transit near internal server error response has a 3xx status code
func (o *TransitNearInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this transit near internal server error response has a 4xx status code
func (o *TransitNearInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this transit near internal server error response has a 5xx status code
func (o *TransitNearInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this transit near internal server error response a status code equal to that given
func (o *TransitNearInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the transit near internal server error response
func (o *TransitNearInternalServerError) Code() int {
	return 500
}

func (o *TransitNearInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /near_transaction][%d] transitNearInternalServerError %s", 500, payload)
}

func (o *TransitNearInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /near_transaction][%d] transitNearInternalServerError %s", 500, payload)
}

func (o *TransitNearInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *TransitNearInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
