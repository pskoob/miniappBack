// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/pskoob/miniappBack/internal/api/definition"
)

// RegisterUserReader is a Reader for the RegisterUser structure.
type RegisterUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRegisterUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRegisterUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRegisterUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewRegisterUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRegisterUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /auth/register] RegisterUser", response, response.Code())
	}
}

// NewRegisterUserOK creates a RegisterUserOK with default headers values
func NewRegisterUserOK() *RegisterUserOK {
	return &RegisterUserOK{}
}

/*
RegisterUserOK describes a response with status code 200, with default header values.

Register Response
*/
type RegisterUserOK struct {
	Payload *models.Error
}

// IsSuccess returns true when this register user o k response has a 2xx status code
func (o *RegisterUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this register user o k response has a 3xx status code
func (o *RegisterUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register user o k response has a 4xx status code
func (o *RegisterUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this register user o k response has a 5xx status code
func (o *RegisterUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this register user o k response a status code equal to that given
func (o *RegisterUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the register user o k response
func (o *RegisterUserOK) Code() int {
	return 200
}

func (o *RegisterUserOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/register][%d] registerUserOK %s", 200, payload)
}

func (o *RegisterUserOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/register][%d] registerUserOK %s", 200, payload)
}

func (o *RegisterUserOK) GetPayload() *models.Error {
	return o.Payload
}

func (o *RegisterUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserBadRequest creates a RegisterUserBadRequest with default headers values
func NewRegisterUserBadRequest() *RegisterUserBadRequest {
	return &RegisterUserBadRequest{}
}

/*
RegisterUserBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RegisterUserBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this register user bad request response has a 2xx status code
func (o *RegisterUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register user bad request response has a 3xx status code
func (o *RegisterUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register user bad request response has a 4xx status code
func (o *RegisterUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this register user bad request response has a 5xx status code
func (o *RegisterUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this register user bad request response a status code equal to that given
func (o *RegisterUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the register user bad request response
func (o *RegisterUserBadRequest) Code() int {
	return 400
}

func (o *RegisterUserBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/register][%d] registerUserBadRequest %s", 400, payload)
}

func (o *RegisterUserBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/register][%d] registerUserBadRequest %s", 400, payload)
}

func (o *RegisterUserBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RegisterUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserForbidden creates a RegisterUserForbidden with default headers values
func NewRegisterUserForbidden() *RegisterUserForbidden {
	return &RegisterUserForbidden{}
}

/*
RegisterUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RegisterUserForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this register user forbidden response has a 2xx status code
func (o *RegisterUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register user forbidden response has a 3xx status code
func (o *RegisterUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register user forbidden response has a 4xx status code
func (o *RegisterUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this register user forbidden response has a 5xx status code
func (o *RegisterUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this register user forbidden response a status code equal to that given
func (o *RegisterUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the register user forbidden response
func (o *RegisterUserForbidden) Code() int {
	return 403
}

func (o *RegisterUserForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/register][%d] registerUserForbidden %s", 403, payload)
}

func (o *RegisterUserForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/register][%d] registerUserForbidden %s", 403, payload)
}

func (o *RegisterUserForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *RegisterUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserUnprocessableEntity creates a RegisterUserUnprocessableEntity with default headers values
func NewRegisterUserUnprocessableEntity() *RegisterUserUnprocessableEntity {
	return &RegisterUserUnprocessableEntity{}
}

/*
RegisterUserUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type RegisterUserUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this register user unprocessable entity response has a 2xx status code
func (o *RegisterUserUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register user unprocessable entity response has a 3xx status code
func (o *RegisterUserUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register user unprocessable entity response has a 4xx status code
func (o *RegisterUserUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this register user unprocessable entity response has a 5xx status code
func (o *RegisterUserUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this register user unprocessable entity response a status code equal to that given
func (o *RegisterUserUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the register user unprocessable entity response
func (o *RegisterUserUnprocessableEntity) Code() int {
	return 422
}

func (o *RegisterUserUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/register][%d] registerUserUnprocessableEntity %s", 422, payload)
}

func (o *RegisterUserUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/register][%d] registerUserUnprocessableEntity %s", 422, payload)
}

func (o *RegisterUserUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *RegisterUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserInternalServerError creates a RegisterUserInternalServerError with default headers values
func NewRegisterUserInternalServerError() *RegisterUserInternalServerError {
	return &RegisterUserInternalServerError{}
}

/*
RegisterUserInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type RegisterUserInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this register user internal server error response has a 2xx status code
func (o *RegisterUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register user internal server error response has a 3xx status code
func (o *RegisterUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register user internal server error response has a 4xx status code
func (o *RegisterUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this register user internal server error response has a 5xx status code
func (o *RegisterUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this register user internal server error response a status code equal to that given
func (o *RegisterUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the register user internal server error response
func (o *RegisterUserInternalServerError) Code() int {
	return 500
}

func (o *RegisterUserInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/register][%d] registerUserInternalServerError %s", 500, payload)
}

func (o *RegisterUserInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/register][%d] registerUserInternalServerError %s", 500, payload)
}

func (o *RegisterUserInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RegisterUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
