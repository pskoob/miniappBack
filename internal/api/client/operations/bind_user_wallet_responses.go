// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/pskoob/miniappBack/internal/api/definition"
)

// BindUserWalletReader is a Reader for the BindUserWallet structure.
type BindUserWalletReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BindUserWalletReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBindUserWalletOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBindUserWalletBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewBindUserWalletForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewBindUserWalletUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBindUserWalletInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /bind_user_wallet/{tg_id}] BindUserWallet", response, response.Code())
	}
}

// NewBindUserWalletOK creates a BindUserWalletOK with default headers values
func NewBindUserWalletOK() *BindUserWalletOK {
	return &BindUserWalletOK{}
}

/*
BindUserWalletOK describes a response with status code 200, with default header values.

Bind Wallet Response
*/
type BindUserWalletOK struct {
	Payload *models.Error
}

// IsSuccess returns true when this bind user wallet o k response has a 2xx status code
func (o *BindUserWalletOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this bind user wallet o k response has a 3xx status code
func (o *BindUserWalletOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind user wallet o k response has a 4xx status code
func (o *BindUserWalletOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this bind user wallet o k response has a 5xx status code
func (o *BindUserWalletOK) IsServerError() bool {
	return false
}

// IsCode returns true when this bind user wallet o k response a status code equal to that given
func (o *BindUserWalletOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the bind user wallet o k response
func (o *BindUserWalletOK) Code() int {
	return 200
}

func (o *BindUserWalletOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bind_user_wallet/{tg_id}][%d] bindUserWalletOK %s", 200, payload)
}

func (o *BindUserWalletOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bind_user_wallet/{tg_id}][%d] bindUserWalletOK %s", 200, payload)
}

func (o *BindUserWalletOK) GetPayload() *models.Error {
	return o.Payload
}

func (o *BindUserWalletOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindUserWalletBadRequest creates a BindUserWalletBadRequest with default headers values
func NewBindUserWalletBadRequest() *BindUserWalletBadRequest {
	return &BindUserWalletBadRequest{}
}

/*
BindUserWalletBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type BindUserWalletBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this bind user wallet bad request response has a 2xx status code
func (o *BindUserWalletBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bind user wallet bad request response has a 3xx status code
func (o *BindUserWalletBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind user wallet bad request response has a 4xx status code
func (o *BindUserWalletBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this bind user wallet bad request response has a 5xx status code
func (o *BindUserWalletBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this bind user wallet bad request response a status code equal to that given
func (o *BindUserWalletBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the bind user wallet bad request response
func (o *BindUserWalletBadRequest) Code() int {
	return 400
}

func (o *BindUserWalletBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bind_user_wallet/{tg_id}][%d] bindUserWalletBadRequest %s", 400, payload)
}

func (o *BindUserWalletBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bind_user_wallet/{tg_id}][%d] bindUserWalletBadRequest %s", 400, payload)
}

func (o *BindUserWalletBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *BindUserWalletBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindUserWalletForbidden creates a BindUserWalletForbidden with default headers values
func NewBindUserWalletForbidden() *BindUserWalletForbidden {
	return &BindUserWalletForbidden{}
}

/*
BindUserWalletForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type BindUserWalletForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this bind user wallet forbidden response has a 2xx status code
func (o *BindUserWalletForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bind user wallet forbidden response has a 3xx status code
func (o *BindUserWalletForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind user wallet forbidden response has a 4xx status code
func (o *BindUserWalletForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this bind user wallet forbidden response has a 5xx status code
func (o *BindUserWalletForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this bind user wallet forbidden response a status code equal to that given
func (o *BindUserWalletForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the bind user wallet forbidden response
func (o *BindUserWalletForbidden) Code() int {
	return 403
}

func (o *BindUserWalletForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bind_user_wallet/{tg_id}][%d] bindUserWalletForbidden %s", 403, payload)
}

func (o *BindUserWalletForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bind_user_wallet/{tg_id}][%d] bindUserWalletForbidden %s", 403, payload)
}

func (o *BindUserWalletForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *BindUserWalletForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindUserWalletUnprocessableEntity creates a BindUserWalletUnprocessableEntity with default headers values
func NewBindUserWalletUnprocessableEntity() *BindUserWalletUnprocessableEntity {
	return &BindUserWalletUnprocessableEntity{}
}

/*
BindUserWalletUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type BindUserWalletUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this bind user wallet unprocessable entity response has a 2xx status code
func (o *BindUserWalletUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bind user wallet unprocessable entity response has a 3xx status code
func (o *BindUserWalletUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind user wallet unprocessable entity response has a 4xx status code
func (o *BindUserWalletUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this bind user wallet unprocessable entity response has a 5xx status code
func (o *BindUserWalletUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this bind user wallet unprocessable entity response a status code equal to that given
func (o *BindUserWalletUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the bind user wallet unprocessable entity response
func (o *BindUserWalletUnprocessableEntity) Code() int {
	return 422
}

func (o *BindUserWalletUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bind_user_wallet/{tg_id}][%d] bindUserWalletUnprocessableEntity %s", 422, payload)
}

func (o *BindUserWalletUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bind_user_wallet/{tg_id}][%d] bindUserWalletUnprocessableEntity %s", 422, payload)
}

func (o *BindUserWalletUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *BindUserWalletUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindUserWalletInternalServerError creates a BindUserWalletInternalServerError with default headers values
func NewBindUserWalletInternalServerError() *BindUserWalletInternalServerError {
	return &BindUserWalletInternalServerError{}
}

/*
BindUserWalletInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type BindUserWalletInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this bind user wallet internal server error response has a 2xx status code
func (o *BindUserWalletInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bind user wallet internal server error response has a 3xx status code
func (o *BindUserWalletInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind user wallet internal server error response has a 4xx status code
func (o *BindUserWalletInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this bind user wallet internal server error response has a 5xx status code
func (o *BindUserWalletInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this bind user wallet internal server error response a status code equal to that given
func (o *BindUserWalletInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the bind user wallet internal server error response
func (o *BindUserWalletInternalServerError) Code() int {
	return 500
}

func (o *BindUserWalletInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bind_user_wallet/{tg_id}][%d] bindUserWalletInternalServerError %s", 500, payload)
}

func (o *BindUserWalletInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bind_user_wallet/{tg_id}][%d] bindUserWalletInternalServerError %s", 500, payload)
}

func (o *BindUserWalletInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *BindUserWalletInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
