// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/pskoob/miniappBack/internal/api/definition"
)

// UpdateUserCardReader is a Reader for the UpdateUserCard structure.
type UpdateUserCardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserCardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserCardOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUserCardBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUserCardForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateUserCardUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateUserCardInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /update_user_card/{tg_id}] UpdateUserCard", response, response.Code())
	}
}

// NewUpdateUserCardOK creates a UpdateUserCardOK with default headers values
func NewUpdateUserCardOK() *UpdateUserCardOK {
	return &UpdateUserCardOK{}
}

/*
UpdateUserCardOK describes a response with status code 200, with default header values.

Update Card Response
*/
type UpdateUserCardOK struct {
	Payload *models.CardBody
}

// IsSuccess returns true when this update user card o k response has a 2xx status code
func (o *UpdateUserCardOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update user card o k response has a 3xx status code
func (o *UpdateUserCardOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user card o k response has a 4xx status code
func (o *UpdateUserCardOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user card o k response has a 5xx status code
func (o *UpdateUserCardOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update user card o k response a status code equal to that given
func (o *UpdateUserCardOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update user card o k response
func (o *UpdateUserCardOK) Code() int {
	return 200
}

func (o *UpdateUserCardOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /update_user_card/{tg_id}][%d] updateUserCardOK %s", 200, payload)
}

func (o *UpdateUserCardOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /update_user_card/{tg_id}][%d] updateUserCardOK %s", 200, payload)
}

func (o *UpdateUserCardOK) GetPayload() *models.CardBody {
	return o.Payload
}

func (o *UpdateUserCardOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CardBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserCardBadRequest creates a UpdateUserCardBadRequest with default headers values
func NewUpdateUserCardBadRequest() *UpdateUserCardBadRequest {
	return &UpdateUserCardBadRequest{}
}

/*
UpdateUserCardBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateUserCardBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user card bad request response has a 2xx status code
func (o *UpdateUserCardBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user card bad request response has a 3xx status code
func (o *UpdateUserCardBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user card bad request response has a 4xx status code
func (o *UpdateUserCardBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user card bad request response has a 5xx status code
func (o *UpdateUserCardBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update user card bad request response a status code equal to that given
func (o *UpdateUserCardBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update user card bad request response
func (o *UpdateUserCardBadRequest) Code() int {
	return 400
}

func (o *UpdateUserCardBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /update_user_card/{tg_id}][%d] updateUserCardBadRequest %s", 400, payload)
}

func (o *UpdateUserCardBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /update_user_card/{tg_id}][%d] updateUserCardBadRequest %s", 400, payload)
}

func (o *UpdateUserCardBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserCardBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserCardForbidden creates a UpdateUserCardForbidden with default headers values
func NewUpdateUserCardForbidden() *UpdateUserCardForbidden {
	return &UpdateUserCardForbidden{}
}

/*
UpdateUserCardForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateUserCardForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user card forbidden response has a 2xx status code
func (o *UpdateUserCardForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user card forbidden response has a 3xx status code
func (o *UpdateUserCardForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user card forbidden response has a 4xx status code
func (o *UpdateUserCardForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user card forbidden response has a 5xx status code
func (o *UpdateUserCardForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update user card forbidden response a status code equal to that given
func (o *UpdateUserCardForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update user card forbidden response
func (o *UpdateUserCardForbidden) Code() int {
	return 403
}

func (o *UpdateUserCardForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /update_user_card/{tg_id}][%d] updateUserCardForbidden %s", 403, payload)
}

func (o *UpdateUserCardForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /update_user_card/{tg_id}][%d] updateUserCardForbidden %s", 403, payload)
}

func (o *UpdateUserCardForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserCardForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserCardUnprocessableEntity creates a UpdateUserCardUnprocessableEntity with default headers values
func NewUpdateUserCardUnprocessableEntity() *UpdateUserCardUnprocessableEntity {
	return &UpdateUserCardUnprocessableEntity{}
}

/*
UpdateUserCardUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type UpdateUserCardUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user card unprocessable entity response has a 2xx status code
func (o *UpdateUserCardUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user card unprocessable entity response has a 3xx status code
func (o *UpdateUserCardUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user card unprocessable entity response has a 4xx status code
func (o *UpdateUserCardUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user card unprocessable entity response has a 5xx status code
func (o *UpdateUserCardUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update user card unprocessable entity response a status code equal to that given
func (o *UpdateUserCardUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update user card unprocessable entity response
func (o *UpdateUserCardUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateUserCardUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /update_user_card/{tg_id}][%d] updateUserCardUnprocessableEntity %s", 422, payload)
}

func (o *UpdateUserCardUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /update_user_card/{tg_id}][%d] updateUserCardUnprocessableEntity %s", 422, payload)
}

func (o *UpdateUserCardUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserCardUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserCardInternalServerError creates a UpdateUserCardInternalServerError with default headers values
func NewUpdateUserCardInternalServerError() *UpdateUserCardInternalServerError {
	return &UpdateUserCardInternalServerError{}
}

/*
UpdateUserCardInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateUserCardInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user card internal server error response has a 2xx status code
func (o *UpdateUserCardInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user card internal server error response has a 3xx status code
func (o *UpdateUserCardInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user card internal server error response has a 4xx status code
func (o *UpdateUserCardInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user card internal server error response has a 5xx status code
func (o *UpdateUserCardInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update user card internal server error response a status code equal to that given
func (o *UpdateUserCardInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update user card internal server error response
func (o *UpdateUserCardInternalServerError) Code() int {
	return 500
}

func (o *UpdateUserCardInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /update_user_card/{tg_id}][%d] updateUserCardInternalServerError %s", 500, payload)
}

func (o *UpdateUserCardInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /update_user_card/{tg_id}][%d] updateUserCardInternalServerError %s", 500, payload)
}

func (o *UpdateUserCardInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserCardInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
