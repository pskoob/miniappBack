// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new operations API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new operations API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetUserProgress(params *GetUserProgressParams, opts ...ClientOption) (*GetUserProgressOK, error)

	SaveProgress(params *SaveProgressParams, opts ...ClientOption) (*SaveProgressOK, error)

	StartAutoClicker(params *StartAutoClickerParams, opts ...ClientOption) (*StartAutoClickerOK, error)

	StartEnergyOffline(params *StartEnergyOfflineParams, opts ...ClientOption) (*StartEnergyOfflineOK, error)

	StopAutoClicker(params *StopAutoClickerParams, opts ...ClientOption) (*StopAutoClickerOK, error)

	StopEnergyOffline(params *StopEnergyOfflineParams, opts ...ClientOption) (*StopEnergyOfflineOK, error)

	TransitNear(params *TransitNearParams, opts ...ClientOption) (*TransitNearOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetUserProgress gets user progress
*/
func (a *Client) GetUserProgress(params *GetUserProgressParams, opts ...ClientOption) (*GetUserProgressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserProgressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserProgress",
		Method:             "GET",
		PathPattern:        "/get_user_progress/{tg_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserProgressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserProgressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserProgress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveProgress saves progress
*/
func (a *Client) SaveProgress(params *SaveProgressParams, opts ...ClientOption) (*SaveProgressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveProgressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SaveProgress",
		Method:             "POST",
		PathPattern:        "/save_progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveProgressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveProgressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SaveProgress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartAutoClicker starts auto clicker
*/
func (a *Client) StartAutoClicker(params *StartAutoClickerParams, opts ...ClientOption) (*StartAutoClickerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartAutoClickerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartAutoClicker",
		Method:             "POST",
		PathPattern:        "/start_auto_clicker/{tg_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartAutoClickerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartAutoClickerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartAutoClicker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartEnergyOffline starts energy offline
*/
func (a *Client) StartEnergyOffline(params *StartEnergyOfflineParams, opts ...ClientOption) (*StartEnergyOfflineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartEnergyOfflineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartEnergyOffline",
		Method:             "POST",
		PathPattern:        "/start_energy_collect/{tg_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartEnergyOfflineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartEnergyOfflineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartEnergyOffline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopAutoClicker stops auto clicker
*/
func (a *Client) StopAutoClicker(params *StopAutoClickerParams, opts ...ClientOption) (*StopAutoClickerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopAutoClickerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StopAutoClicker",
		Method:             "POST",
		PathPattern:        "/stop_auto_clicker/{tg_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopAutoClickerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopAutoClickerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopAutoClicker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopEnergyOffline stops energy offline
*/
func (a *Client) StopEnergyOffline(params *StopEnergyOfflineParams, opts ...ClientOption) (*StopEnergyOfflineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopEnergyOfflineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StopEnergyOffline",
		Method:             "POST",
		PathPattern:        "/stop_energy_collect/{tg_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopEnergyOfflineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopEnergyOfflineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopEnergyOffline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TransitNear transits near
*/
func (a *Client) TransitNear(params *TransitNearParams, opts ...ClientOption) (*TransitNearOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransitNearParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TransitNear",
		Method:             "POST",
		PathPattern:        "/near_transaction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TransitNearReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransitNearOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TransitNear: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
