// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/pskoob/miniappBack/internal/api/definition"
)

// SaveProgressReader is a Reader for the SaveProgress structure.
type SaveProgressReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SaveProgressReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSaveProgressOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSaveProgressBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSaveProgressForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSaveProgressUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSaveProgressInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /save_progress/{tg_id}] SaveProgress", response, response.Code())
	}
}

// NewSaveProgressOK creates a SaveProgressOK with default headers values
func NewSaveProgressOK() *SaveProgressOK {
	return &SaveProgressOK{}
}

/*
SaveProgressOK describes a response with status code 200, with default header values.

Save Progress Response
*/
type SaveProgressOK struct {
	Payload *models.Error
}

// IsSuccess returns true when this save progress o k response has a 2xx status code
func (o *SaveProgressOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this save progress o k response has a 3xx status code
func (o *SaveProgressOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save progress o k response has a 4xx status code
func (o *SaveProgressOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this save progress o k response has a 5xx status code
func (o *SaveProgressOK) IsServerError() bool {
	return false
}

// IsCode returns true when this save progress o k response a status code equal to that given
func (o *SaveProgressOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the save progress o k response
func (o *SaveProgressOK) Code() int {
	return 200
}

func (o *SaveProgressOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /save_progress/{tg_id}][%d] saveProgressOK %s", 200, payload)
}

func (o *SaveProgressOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /save_progress/{tg_id}][%d] saveProgressOK %s", 200, payload)
}

func (o *SaveProgressOK) GetPayload() *models.Error {
	return o.Payload
}

func (o *SaveProgressOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveProgressBadRequest creates a SaveProgressBadRequest with default headers values
func NewSaveProgressBadRequest() *SaveProgressBadRequest {
	return &SaveProgressBadRequest{}
}

/*
SaveProgressBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type SaveProgressBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this save progress bad request response has a 2xx status code
func (o *SaveProgressBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save progress bad request response has a 3xx status code
func (o *SaveProgressBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save progress bad request response has a 4xx status code
func (o *SaveProgressBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this save progress bad request response has a 5xx status code
func (o *SaveProgressBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this save progress bad request response a status code equal to that given
func (o *SaveProgressBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the save progress bad request response
func (o *SaveProgressBadRequest) Code() int {
	return 400
}

func (o *SaveProgressBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /save_progress/{tg_id}][%d] saveProgressBadRequest %s", 400, payload)
}

func (o *SaveProgressBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /save_progress/{tg_id}][%d] saveProgressBadRequest %s", 400, payload)
}

func (o *SaveProgressBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SaveProgressBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveProgressForbidden creates a SaveProgressForbidden with default headers values
func NewSaveProgressForbidden() *SaveProgressForbidden {
	return &SaveProgressForbidden{}
}

/*
SaveProgressForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SaveProgressForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this save progress forbidden response has a 2xx status code
func (o *SaveProgressForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save progress forbidden response has a 3xx status code
func (o *SaveProgressForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save progress forbidden response has a 4xx status code
func (o *SaveProgressForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this save progress forbidden response has a 5xx status code
func (o *SaveProgressForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this save progress forbidden response a status code equal to that given
func (o *SaveProgressForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the save progress forbidden response
func (o *SaveProgressForbidden) Code() int {
	return 403
}

func (o *SaveProgressForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /save_progress/{tg_id}][%d] saveProgressForbidden %s", 403, payload)
}

func (o *SaveProgressForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /save_progress/{tg_id}][%d] saveProgressForbidden %s", 403, payload)
}

func (o *SaveProgressForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *SaveProgressForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveProgressUnprocessableEntity creates a SaveProgressUnprocessableEntity with default headers values
func NewSaveProgressUnprocessableEntity() *SaveProgressUnprocessableEntity {
	return &SaveProgressUnprocessableEntity{}
}

/*
SaveProgressUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type SaveProgressUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this save progress unprocessable entity response has a 2xx status code
func (o *SaveProgressUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save progress unprocessable entity response has a 3xx status code
func (o *SaveProgressUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save progress unprocessable entity response has a 4xx status code
func (o *SaveProgressUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this save progress unprocessable entity response has a 5xx status code
func (o *SaveProgressUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this save progress unprocessable entity response a status code equal to that given
func (o *SaveProgressUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the save progress unprocessable entity response
func (o *SaveProgressUnprocessableEntity) Code() int {
	return 422
}

func (o *SaveProgressUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /save_progress/{tg_id}][%d] saveProgressUnprocessableEntity %s", 422, payload)
}

func (o *SaveProgressUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /save_progress/{tg_id}][%d] saveProgressUnprocessableEntity %s", 422, payload)
}

func (o *SaveProgressUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *SaveProgressUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveProgressInternalServerError creates a SaveProgressInternalServerError with default headers values
func NewSaveProgressInternalServerError() *SaveProgressInternalServerError {
	return &SaveProgressInternalServerError{}
}

/*
SaveProgressInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type SaveProgressInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this save progress internal server error response has a 2xx status code
func (o *SaveProgressInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save progress internal server error response has a 3xx status code
func (o *SaveProgressInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save progress internal server error response has a 4xx status code
func (o *SaveProgressInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this save progress internal server error response has a 5xx status code
func (o *SaveProgressInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this save progress internal server error response a status code equal to that given
func (o *SaveProgressInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the save progress internal server error response
func (o *SaveProgressInternalServerError) Code() int {
	return 500
}

func (o *SaveProgressInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /save_progress/{tg_id}][%d] saveProgressInternalServerError %s", 500, payload)
}

func (o *SaveProgressInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /save_progress/{tg_id}][%d] saveProgressInternalServerError %s", 500, payload)
}

func (o *SaveProgressInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *SaveProgressInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
