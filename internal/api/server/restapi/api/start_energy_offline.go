// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// StartEnergyOfflineHandlerFunc turns a function with the right signature into a start energy offline handler
type StartEnergyOfflineHandlerFunc func(StartEnergyOfflineParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StartEnergyOfflineHandlerFunc) Handle(params StartEnergyOfflineParams) middleware.Responder {
	return fn(params)
}

// StartEnergyOfflineHandler interface for that can handle valid start energy offline params
type StartEnergyOfflineHandler interface {
	Handle(StartEnergyOfflineParams) middleware.Responder
}

// NewStartEnergyOffline creates a new http.Handler for the start energy offline operation
func NewStartEnergyOffline(ctx *middleware.Context, handler StartEnergyOfflineHandler) *StartEnergyOffline {
	return &StartEnergyOffline{Context: ctx, Handler: handler}
}

/*
	StartEnergyOffline swagger:route POST /start_energy_collect/{tg_id} Energy startEnergyOffline

Start Energy Offline
*/
type StartEnergyOffline struct {
	Context *middleware.Context
	Handler StartEnergyOfflineHandler
}

func (o *StartEnergyOffline) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewStartEnergyOfflineParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
