// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CollectReferralEarnHandlerFunc turns a function with the right signature into a collect referral earn handler
type CollectReferralEarnHandlerFunc func(CollectReferralEarnParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CollectReferralEarnHandlerFunc) Handle(params CollectReferralEarnParams) middleware.Responder {
	return fn(params)
}

// CollectReferralEarnHandler interface for that can handle valid collect referral earn params
type CollectReferralEarnHandler interface {
	Handle(CollectReferralEarnParams) middleware.Responder
}

// NewCollectReferralEarn creates a new http.Handler for the collect referral earn operation
func NewCollectReferralEarn(ctx *middleware.Context, handler CollectReferralEarnHandler) *CollectReferralEarn {
	return &CollectReferralEarn{Context: ctx, Handler: handler}
}

/*
	CollectReferralEarn swagger:route GET /collect_referral_earn/{tg_id} User collectReferralEarn

Collect Referral Earn
*/
type CollectReferralEarn struct {
	Context *middleware.Context
	Handler CollectReferralEarnHandler
}

func (o *CollectReferralEarn) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCollectReferralEarnParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
